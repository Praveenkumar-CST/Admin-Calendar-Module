@page "/calendar"
@using System.Text.Json
@using CalendarApp.Models  
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="page-container">
    <div class="calendar-container">
        @if (isLoading)
        {
            <div class="loading-overlay">
                <div class="loading-spinner"></div>
            </div>
        }
        <div class="calendar-header-container">
            <button class="nav-button" @onclick="PreviousMonth">Previous</button>
            <h3 class="calendar-title">@currentDate.ToString("MMMM yyyy")</h3>
            <button class="nav-button" @onclick="NextMonth">Next</button>
        </div>
        <div class="calendar">
            <div class="calendar-header">
                @foreach (var day in daysOfWeek)
                {
                    <div class="day-header">@day</div>
                }
            </div>
            <div class="calendar-body">
                @foreach (var week in calendarWeeks)
                {
                    <div class="week">
                        @foreach (var day in week)
                        {
                            <div class="day @(day.IsCurrentMonth ? "" : "other-month") @(day.IsToday ? "today" : "") @(HasEvent(day.Date) ? "has-event" : "")"
                                 @onclick="() => SelectDate(day.Date)">
                                <div class="day-content">
                                    <div class="day-number">@day.Date.Day</div>
                                    @if (HasEvent(day.Date))
                                    {
                                        <div class="event-name">
                                            @(events[day.Date]?.Description ?? "Unnamed Event")
                                        </div>
                                    }
                                    @if (IsHoliday(day.Date))
                                    {
                                        <div class="holiday-indicator @(GetHolidayType(day.Date) == "Permanent" ? "permanent" : "optional")"></div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
        <div class="holidays-box" @onclick="NavigateToHolidays"><span>Holidays</span></div>
    </div>
    <div class="event-and-holidays-container">
        @if (showEventInput)
        {
            <div class="event-panel">
                <div class="event-panel-header">
                    <h4>Events for @selectedDate.ToString("dd-MM-yyyy")</h4>
                    <button class="close-button" @onclick="CloseEventInput">×</button>
                </div>
                <div class="event-panel-content">
                    @if (hasExistingEvent)
                    {
                        <div class="existing-event">
                            <strong>Event:</strong> @(events[selectedDate]?.Description ?? "No description available")
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="success-message">@successMessage</div>
                    }
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">@errorMessage</div>
                    }
                    <textarea @bind="eventText" placeholder="Enter new event details..." class="event-textarea"></textarea>
                    <div class="holiday-type-selection">
                        <label>Holiday Type (required):</label>
                        <div class="checkbox-group">
                            <label class="checkbox-label">
                                <input type="checkbox" 
                                       @bind="isPermanentHoliday" 
                                       @onclick="() => ToggleHolidayType(true)" />
                                <span>Permanent Holiday</span>
                            </label>
                            <label class="checkbox-label">
                                <input type="checkbox" 
                                       @bind="isOptionalHoliday" 
                                       @onclick="() => ToggleHolidayType(false)" />
                                <span>Optional Holiday</span>
                            </label>
                        </div>
                    </div>
                    <div class="event-buttons">
                        @if (hasExistingEvent)
                        {
                            <button class="action-button save" @onclick="UpdateEvent">Update</button>
                        }
                        else
                        {
                            <button class="action-button save" @onclick="SaveEvent">Save</button>
                        }
                        <button class="action-button cancel" @onclick="CloseEventInput">Cancel</button>
                        @if (hasExistingEvent)
                        {
                            <button class="action-button delete" @onclick="DeleteEvent">Delete</button>
                        }
                    </div>
                </div>
            </div>
            <div class="holidays-month-box">
                <h3>Holidays in @currentDate.ToString("MMMM yyyy")</h3>
                <div class="holidays-list-container">
                    @if (GetHolidaysInMonth().Any())
                    {
                        <ul>
                            @foreach (var holiday in GetHolidaysInMonth())
                            {
                                <li class="@(holiday.Value.HolidayType == "Permanent" ? "permanent-holiday" : "optional-holiday")"
                                    @onclick="() => SelectDate(holiday.Key)">
                                    <span class="holiday-date">@holiday.Key.ToString("dd-MM-yyyy") (@holiday.Key.ToString("ddd"))</span>
                                    <span class="holiday-name">- @(holiday.Value.Description ?? "Unnamed Event")</span>
                                    <span class="holiday-type">- @(holiday.Value.HolidayType ?? "N/A")</span>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="no-holidays">No holidays this month.</p>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private DateTime currentDate = DateTime.Today;
    private string[] daysOfWeek = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
    private List<List<CalendarDay>> calendarWeeks = new();
    private Dictionary<DateTime, Event> events = new();
    private bool showEventInput;
    private DateTime selectedDate;
    private string eventText = "";
    private bool hasExistingEvent;
    private bool isPermanentHoliday = false;
    private bool isOptionalHoliday = false;
    private string? successMessage;
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        GenerateCalendar();
        isLoading = false;
    }

    private async Task LoadEvents()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Event>>("http://localhost:5085/api/Events");
            if (response != null)
            {
                events = response
                    .Where(e => DateTime.TryParse(e.Date, out _) && e != null)
                    .ToDictionary(
                        e => DateTime.Parse(e.Date!),
                        e => e
                    );
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load events: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
        }
    }

    private void GenerateCalendar()
    {
        calendarWeeks.Clear();
        var firstOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
        var firstDayOfWeek = (int)firstOfMonth.DayOfWeek;
        var currentDay = firstOfMonth.AddDays(-firstDayOfWeek);

        for (int week = 0; week < 6; week++)
        {
            calendarWeeks.Add(Enumerable.Range(0, 7).Select(d => new CalendarDay
            {
                Date = currentDay.AddDays(d),
                IsCurrentMonth = currentDay.AddDays(d).Month == currentDate.Month,
                IsToday = currentDay.AddDays(d).Date == DateTime.Today.Date
            }).ToList());
            currentDay = currentDay.AddDays(7);
        }
    }

    private void SelectDate(DateTime date)
    {
        selectedDate = date;
        hasExistingEvent = events.ContainsKey(date);

        if (hasExistingEvent)
        {
            eventText = events[date]?.Description ?? "";
            isPermanentHoliday = events[date]?.HolidayType == "Permanent";
            isOptionalHoliday = events[date]?.HolidayType == "Optional";
        }
        else
        {
            eventText = "";
            isPermanentHoliday = false;
            isOptionalHoliday = false;
        }

        showEventInput = true;
        successMessage = null;
        errorMessage = null;
        StateHasChanged();
    }

    private async Task SaveEvent()
    {
        if (string.IsNullOrWhiteSpace(eventText))
        {
            errorMessage = "Please enter event details!";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
            return;
        }

        if (!isPermanentHoliday && !isOptionalHoliday)
        {
            errorMessage = "Please select a holiday type (Permanent or Optional)!";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
            return;
        }

        try
        {
            var eventToSave = new Event
            {
                Date = selectedDate.ToString("yyyy-MM-dd"),
                Description = eventText,
                HolidayType = isPermanentHoliday ? "Permanent" : "Optional"
            };

            HttpResponseMessage response = await Http.PostAsJsonAsync("http://localhost:5085/api/Events", eventToSave);

            if (response.IsSuccessStatusCode)
            {
                await LoadEvents();
                GenerateCalendar();
                successMessage = "Event saved successfully!";
                hasExistingEvent = true;
                StateHasChanged();

                await Task.Delay(3000);
                successMessage = null;
            }
            else
            {
                errorMessage = $"Failed to save event: {await response.Content.ReadAsStringAsync()}";
                StateHasChanged();
                await Task.Delay(3000);
                errorMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving event: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
        }
    }

    private async Task UpdateEvent()
    {
        if (string.IsNullOrWhiteSpace(eventText))
        {
            errorMessage = "Please enter event details!";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
            return;
        }

        if (!isPermanentHoliday && !isOptionalHoliday)
        {
            errorMessage = "Please select a holiday type (Permanent or Optional)!";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
            return;
        }

        try
        {
            var eventToSave = new Event
            {
                Date = selectedDate.ToString("yyyy-MM-dd"),
                Description = eventText,
                HolidayType = isPermanentHoliday ? "Permanent" : "Optional"
            };

            HttpResponseMessage response = await Http.PutAsJsonAsync($"http://localhost:5085/api/Events/{selectedDate:yyyy-MM-dd}", eventToSave);

            if (response.IsSuccessStatusCode)
            {
                await LoadEvents();
                GenerateCalendar();
                successMessage = "Event updated successfully!";
                StateHasChanged();

                await Task.Delay(3000);
                successMessage = null;
            }
            else
            {
                errorMessage = $"Failed to update event: {await response.Content.ReadAsStringAsync()}";
                StateHasChanged();
                await Task.Delay(3000);
                errorMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating event: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
        }
    }

    private void CloseEventInput()
    {
        showEventInput = false;
        eventText = "";
        isPermanentHoliday = false;
        isOptionalHoliday = false;
        successMessage = null;
        errorMessage = null;
        hasExistingEvent = false;
        StateHasChanged();
    }

    private async Task DeleteEvent()
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5085/api/Events/{selectedDate:yyyy-MM-dd}");

            if (response.IsSuccessStatusCode)
            {
                await LoadEvents();
                GenerateCalendar();
                successMessage = "Event deleted successfully!";
                hasExistingEvent = false;
                eventText = "";
                isPermanentHoliday = false;
                isOptionalHoliday = false;
                StateHasChanged();

                await Task.Delay(3000);
                successMessage = null;
            }
            else
            {
                errorMessage = $"Failed to delete event: {await response.Content.ReadAsStringAsync()}";
                StateHasChanged();
                await Task.Delay(3000);
                errorMessage = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting event: {ex.Message}";
            StateHasChanged();
            await Task.Delay(3000);
            errorMessage = null;
        }
    }

    private void ToggleHolidayType(bool isPermanent)
    {
        if (isPermanent)
        {
            isPermanentHoliday = true;
            isOptionalHoliday = false;
        }
        else
        {
            isPermanentHoliday = false;
            isOptionalHoliday = true;
        }
        StateHasChanged();
    }

    private bool HasEvent(DateTime date) => events.ContainsKey(date);
    private bool IsHoliday(DateTime date) => events.ContainsKey(date);
    private string GetHolidayType(DateTime date) => events.TryGetValue(date, out var evt) ? evt.HolidayType ?? "" : "";

    private IEnumerable<KeyValuePair<DateTime, Event>> GetHolidaysInMonth()
    {
        return events
            .Where(e => e.Key.Month == currentDate.Month && e.Key.Year == currentDate.Year)
            .OrderBy(e => e.Key);
    }

    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
        GenerateCalendar();
        StateHasChanged();
    }

    private void PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
        GenerateCalendar();
        StateHasChanged();
    }

    private void NavigateToHolidays() => NavigationManager.NavigateTo("/holidays");
}

<style>
    html, body {
        background-color: #ffffff;
        margin: 0;
        padding: 0;
        height: 100%;
        width: 100%;
        overflow-x: hidden;
    }

    .page-container {
        min-height: 100vh;
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 20px;
        gap: 20px;
        background-color: #ffffff;
        max-width: 100vw;
        box-sizing: border-box;
    }

    .calendar-container {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        width: 800px;
    }

    .calendar-header-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .nav-button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Segoe UI', sans-serif;
        font-weight: 500;
        transition: background-color 0.2s ease;
    }

    .nav-button:hover {
        background-color: #2980b9;
    }

    .calendar-title {
        color: #1a1a1a;
        text-align: center;
        margin: 0;
        font-family: 'Segoe UI', sans-serif;
        font-size: 28px;
        font-weight: 600;
    }

    .calendar {
        width: 100%;
        background-color: #2c3e50;
        border-radius: 8px;
        overflow: hidden;
    }

    .calendar-header {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        text-align: center;
        background-color: #34495e;
        color: white;
        padding: 12px 0;
        font-family: 'Segoe UI', sans-serif;
    }

    .day-header {
        padding: 10px;
        font-weight: 600;
        font-size: 16px;
    }

    .calendar-body {
        display: grid;
        gap: 1px;
        background-color: #34495e;
    }

    .week {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
    }

    .day {
        text-align: center;
        padding: 10px;
        background-color: #ffffff;
        color: #2c3e50;
        cursor: pointer;
        transition: all 0.2s ease;
        font-family: 'Segoe UI', sans-serif;
        position: relative;
        height: 76px; /* Reduced from 100px to 76px (approx 1cm less) */
        display: flex;
        align-items: stretch;
        overflow: hidden; /* Ensures uniform size */
    }

    .day-content {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        width: 100%;
        overflow: hidden; /* Prevents content from overflowing */
    }

    .day:hover {
        background-color: #3498db;
        color: white;
        transform: scale(1.05);
    }

    .day:hover .event-name {
        color: white;
    }

    .other-month {
        background-color: #ecf0f1;
        color: #7f8c8d;
    }

    .other-month:hover {
        background-color: #bdc3c7;
        color: #2c3e50;
    }

    .today {
        background-color: #3498db;
        color: white;
        font-weight: bold;
        border: 2px solid #2980b9;
    }

    .today:hover {
        background-color: #2980b9;
    }

    .day-number {
        font-size: 16px;
        margin-top: 5px;
    }

    .event-name {
        font-size: 12px;
        margin-bottom: 5px;
        color: #34495e;
        padding: 2px 5px;
        word-wrap: break-word;
        overflow: hidden; /* Hides excess text */
        text-overflow: ellipsis;
        max-height: 36px; /* Adjusted to fit reduced height, about 2 lines */
        line-height: 1.2;
    }

    .holiday-indicator {
        position: absolute;
        bottom: 5px;
        right: 5px;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        border: 1px solid #fff;
    }

    .holiday-indicator.permanent {
        background-color: #28a745;
    }

    .holiday-indicator.optional {
        background-color: #e74c3c;
    }

    .holidays-box {
        margin-top: 20px;
        background-color: #3498db;
        border-radius: 5px;
        padding: 15px;
        text-align: center;
        color: white;
        font-family: 'Segoe UI', sans-serif;
        font-size: 18px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    .holidays-box:hover {
        background-color: #2980b9;
    }

    .holidays-box span {
        font-weight: 500;
    }

    .event-and-holidays-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .event-panel {
        width: 350px;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        padding: 25px;
        top: 20px;
        height: fit-content;
    }

    .event-panel-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .event-panel-header h4 {
        margin: 0;
        color: #2c3e50;
        font-family: 'Segoe UI', sans-serif;
        font-size: 18px;
        font-weight: 600;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 24px;
        color: #7f8c8d;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .close-button:hover {
        color: #e74c3c;
    }

    .event-panel-content {
        display: flex;
        overflow: hidden;
        flex-direction: column;
        gap: 15px;
    }

    .existing-event {
        padding: 10px;
        background-color: #e8f4f8;
        border-radius: 6px;
        color: #2c3e50;
        font-family: 'Segoe UI', sans-serif;
        font-size: 14px;
    }

    .success-message {
        padding: 10px;
        background-color: #d4edda;
        color: #155724;
        border-radius: 6px;
        font-family: 'Segoe UI', sans-serif;
    }

    .error-message {
        padding: 10px;
        background-color: #f8d7da;
        color: #721c24;
        border-radius: 6px;
        font-family: 'Segoe UI', sans-serif;
    }

    .event-textarea {
        width: 100%;
        height: 120px;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-family: 'Segoe UI', sans-serif;
        resize: none;
        transition: border-color 0.3s ease;
    }

    .event-textarea:focus {
        border-color: #3498db;
        outline: none;
    }

    .holiday-type-selection {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .holiday-type-selection label {
        color: #2c3e50;
        font-family: 'Segoe UI', sans-serif;
        font-weight: 500;
    }

    .checkbox-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        gap: 8px;
        color: #2c3e50;
        font-family: 'Segoe UI', sans-serif;
    }

    .checkbox-label input[type="checkbox"] {
        width: 16px;
        height: 16px;
        cursor: pointer;
        accent-color: #4a90e2;
    }

    .checkbox-label span {
        font-size: 14px;
    }

    .event-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }

    .action-button {
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        font-family: 'Segoe UI', sans-serif;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .action-button.save {
        background-color: #3498db;
        color: white;
    }

    .action-button.save:hover {
        background-color: #2980b9;
    }

    .action-button.cancel {
        background-color: #95a5a6;
        color: white;
    }

    .action-button.cancel:hover {
        background-color: #7f8c8d;
    }

    .action-button.delete {
        background-color: #e74c3c;
        color: white;
    }

    .action-button.delete:hover {
        background-color: #c0392b;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #3498db;
        border-top: 4px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .holidays-month-box {
        width: 350px;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        padding: 25px;
        max-height: 400px;
    }

    .holidays-month-box h3 {
        margin: 0 0 15px 0;
        font-size: 20px;
        color: #2c3e50;
        font-family: 'Segoe UI', sans-serif;
        font-weight: 600;
    }

    .holidays-list-container {
        max-height: 300px;
        overflow-y: auto;
        padding-right: 10px;
    }

    .holidays-month-box ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .holidays-month-box li {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        overflow: hidden;
        padding: 12px;
        border-radius: 6px;
        margin-bottom: 8px;
        font-family: 'Segoe UI', sans-serif;
        font-size: 14px;
        transition: background-color 0.2s ease;
        cursor: pointer;
    }

    .holidays-month-box li:hover {
        background-color: #f2f5f5db;
        transform: scale(1.02);
    }

    .holidays-month-box li.permanent-holiday {
        background-color: #d3d3d3;
    }

    .holidays-month-box li.optional-holiday {
        background-color: #d3d3d3;
    }

    .holiday-date {
        font-weight: 600;
        color: #2c3e50;
        margin-right: 8px;
    }

    .holiday-name {
        flex: 1;
        font-weight: 700;
        color: #34495e;
        margin-right: 8px;
        white-space: nowrap;
        overflow: visible;
        max-width: none;
    }

    .holiday-type {
        font-style: italic;
        color: #7f8c8d;
    }

    .no-holidays {
        color: #95a5a6;
        font-family: 'Segoe UI', sans-serif;
        font-size: 14px;
        text-align: center;
        padding: 20px 0;
    }

    .holidays-list-container::-webkit-scrollbar {
        width: 8px;
    }

    .holidays-list-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 4px;
    }

    .holidays-list-container::-webkit-scrollbar-thumb {
        background: #88b3e3;
        border-radius: 4px;
    }

    .holidays-list-container::-webkit-scrollbar-thumb:hover {
        background: #357abd;
    }
</style>