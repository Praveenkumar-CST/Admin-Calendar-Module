@page "/holidays"
@inject HttpClient Http
@inject NavigationManager Navigation
@implements IDisposable

<h3>Holiday List 2025</h3>

<div class="holiday-boxes">
    <div class="permanent-holidays">
        <h4>Permanent Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in permanentHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDate(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td class="event-description">
                            <div class="event-content">@holiday.Description</div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="optional-holidays">
        <h4>Optional Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in optionalHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDate(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td class="event-description">
                            <div class="event-content">@holiday.Description</div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (isLoading)
{
    <p>Loading holidays...</p>
}
else if (errorMessage != null)
{
    <p class="error-message">@errorMessage</p>
    <p>Raw API Response:</p>
    <pre>@rawResponse</pre>
}
else if (holidays.Length == 0)
{
    <p>No holidays found for 2025.</p>
    <p>Raw API Response:</p>
    <pre>@rawResponse</pre>
}

<style>
/* Existing styles remain unchanged */
body {
    background-color: #ffffff;
    color: #000000;
    font-family: Arial, sans-serif;
}

h3 {
    color: #1e90ff;
    text-align: center;
    margin-bottom: 20px;
}

h4 {
    color: #1e90ff;
    margin-bottom: 10px;
}

.holiday-boxes {
    display: flex;
    justify-content: space-around;
    margin-bottom: 20px;
}

.permanent-holidays, .optional-holidays {
    width: 45%;
    background-color: #d3d3d3;
    padding: 15px;
    border-radius: 10px;
}

.holiday-table {
    width: 100%;
    border-collapse: collapse;
    background-color: #f5f5f5;
    table-layout: fixed; /* Ensure the table maintains a fixed width */
}

.holiday-table th {
    background-color: #1e90ff;
    color: #ffffff;
    padding: 10px;
    text-align: left;
}

.holiday-table td {
    padding: 10px;
    border-bottom: 1px solid #000000;
    color: #000000;
    word-wrap: break-word; /* Allow text to wrap within the cell */
}

.holiday-table .event-description {
    max-width: 200px; /* Adjust width as needed */
    white-space: normal; /* Allow text to wrap */
}

.holiday-table .event-content {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 5; /* Show only 3 lines of text */
    -webkit-box-orient: vertical;
}

.holiday-table tr:nth-child(even) {
    background-color: #ffffff;
}

.holiday-table tr:hover {
    background-color: #87cefa;
}

.error-message {
    color: #000000;
    background-color: #ff4d4d;
    padding: 10px;
    text-align: center;
    border-radius: 5px;
}

p {
    text-align: center;
    color: #000000;
}

pre {
    background-color: #f5f5f5;
    color: #000000;
    padding: 10px;
    border-radius: 5px;
    text-align: left;
    max-height: 300px;
    overflow-y: auto;
    margin: 0 auto;
    width: 80%;
}

.edit-button {
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 10px 20px;
    background-color: #1e90ff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

.edit-button:hover {
    background-color: #4682b4;
}
</style>

@code {
    private Event[] holidays = Array.Empty<Event>();
    private Event[] permanentHolidays = Array.Empty<Event>();
    private Event[] optionalHolidays = Array.Empty<Event>();
    private string? errorMessage;
    private bool isLoading = true;
    private string rawResponse = "No response yet.";
    private System.Timers.Timer? timer;

    public class Event
    {
        public int Id { get; set; }
        public string Date { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string HolidayType { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchHolidays();
        timer = new System.Timers.Timer(5000);
        timer.Elapsed += async (sender, e) => await RefreshHolidays();
        timer.AutoReset = true;
        timer.Start();
    }

    private async Task FetchHolidays()
    {
        try
        {
            isLoading = true;
            string url = "http://localhost:5085/api/Events";

            var httpResponse = await Http.GetAsync(url);
            rawResponse = await httpResponse.Content.ReadAsStringAsync();

            if (httpResponse.IsSuccessStatusCode)
            {
                holidays = await httpResponse.Content.ReadFromJsonAsync<Event[]>() ?? Array.Empty<Event>();
                permanentHolidays = holidays.Where(h => h.HolidayType == "Permanent").ToArray();
                optionalHolidays = holidays.Where(h => h.HolidayType == "Optional").ToArray();
            }
            else
            {
                errorMessage = $"API request failed with status: {httpResponse.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching holidays: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshHolidays()
    {
        await FetchHolidays();
        await InvokeAsync(StateHasChanged);
    }

    public string FormatDate(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return $"{parsedDate.Day:D2}/{parsedDate.Month:D2}/{parsedDate.Year}";
        }
        return date;
    }

    public string GetDayOfWeek(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return parsedDate.ToString("dddd"); // Returns full day name (e.g., "Monday")
        }
        return "Invalid Date";
    }

    public void Dispose()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
        }
    }
}
