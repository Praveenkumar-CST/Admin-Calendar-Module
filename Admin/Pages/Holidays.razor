@page "/holidays"
@inject HttpClient Http
@inject NavigationManager Navigation
@using Holiday.Models
@implements IDisposable

<h3>Holiday List</h3>

<div class="holiday-boxes">
    <div class="permanent-holidays">
        <h4>Permanent Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in permanentHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDate(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td class="event-description">
                            <div class="event-content">@holiday.Description</div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="optional-holidays">
        <h4>Optional Holidays</h4>
        <table class="holiday-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Day</th>
                    <th>Event</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var holiday in optionalHolidays.OrderByDescending(h => DateTime.Parse(h.Date)))
                {
                    <tr>
                        <td>@FormatDate(holiday.Date)</td>
                        <td>@GetDayOfWeek(holiday.Date)</td>
                        <td class="event-description">
                            <div class="event-content">@holiday.Description</div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@if (isLoading)
{
    <p>Loading holidays...</p>
}
else if (errorMessage != null)
{
    <p class="error-message">@errorMessage</p>
    <p>Raw API Response:</p>
    <pre>@rawResponse</pre>
}
else if (holidays.Length == 0)
{
    <p>No holidays found for 2025.</p>
    <p>Raw API Response:</p>
    <pre>@rawResponse</pre>
}

@code {
    private Event[] holidays = Array.Empty<Event>();
    private Event[] permanentHolidays = Array.Empty<Event>();
    private Event[] optionalHolidays = Array.Empty<Event>();
    private string? errorMessage;
    private bool isLoading = true;
    private string rawResponse = "No response yet.";
    private System.Timers.Timer? timer;

    // Lifecycle method to initialize the component and fetch holidays
    protected override async Task OnInitializedAsync()
    {
        await FetchHolidays();
        timer = new System.Timers.Timer(5000);
        timer.Elapsed += async (sender, e) => await RefreshHolidays();
        timer.AutoReset = true;
        timer.Start();
    }

    // Fetches holiday data from the API
    private async Task FetchHolidays()
    {
        try
        {
            isLoading = true;
            string url = "http://localhost:5085/api/Events";

            var httpResponse = await Http.GetAsync(url);
            rawResponse = await httpResponse.Content.ReadAsStringAsync();

            if (httpResponse.IsSuccessStatusCode)
            {
                holidays = await httpResponse.Content.ReadFromJsonAsync<Event[]>() ?? Array.Empty<Event>();
                permanentHolidays = holidays.Where(h => h.HolidayType == "Permanent").ToArray();
                optionalHolidays = holidays.Where(h => h.HolidayType == "Optional").ToArray();
            }
            else
            {
                errorMessage = $"API request failed with status: {httpResponse.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error fetching holidays: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Refreshes the holiday data periodically
    private async Task RefreshHolidays()
    {
        await FetchHolidays();
        await InvokeAsync(StateHasChanged);
    }

    // Formats a date string to "DD/MM/YYYY"
    public string FormatDate(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return $"{parsedDate.Day:D2}/{parsedDate.Month:D2}/{parsedDate.Year}";
        }
        return date;
    }

    // Returns the day of the week for a given date string
    public string GetDayOfWeek(string date)
    {
        if (DateTime.TryParse(date, out DateTime parsedDate))
        {
            return parsedDate.ToString("dddd"); // Returns full day name (e.g., "Monday")
        }
        return "Invalid Date";
    }

    // Stops and disposes of the timer when the component is disposed
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
        }
    }
}
